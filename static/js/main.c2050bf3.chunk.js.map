{"version":3,"sources":["enums/Todos.tsx","components/TodoList/TodoList.tsx","components/helpers.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Todos","TodoList","todos","onSelectTodo","onClosedTodo","useState","currentTodoId","setCurrentTodoId","handleClick","useCallback","todo","id","className","map","completed","classNames","title","type","onClick","TodoFilter","onUploadedTodos","onCurrentTodos","query","setQuery","All","filter","setFilter","handleStatusSelect","event","newFilter","target","value","handleInput","newQuery","handleReset","filteredTodos","useMemo","fixedTitle","toLocaleLowerCase","fixedQuery","isActive","Active","isCompleted","Completed","filterByStatus","includes","filterTodos","useEffect","onChange","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onResetTodo","user","setUser","isUserLoaded","setIsUserLoaded","fetchUser","a","userId","currentUser","href","name","App","isLoaded","setIsLoaded","todosFromServer","setTodos","selectedTodo","setSelectedTodo","setFilteredTodos","hasError","setHasError","fetchTodos","uploadedTodos","todoList","ReactDOM","render","document","getElementById"],"mappings":"iLAAYA,E,0FCUCC,EAA4B,SAAC,GAInC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,aACAC,EACI,EADJA,aAEA,EAA0CC,mBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEMC,EAAcC,uBAAY,SAACC,GAC/BH,EAAiBG,EAAKC,IACtBR,EAAaO,KACZ,CAACP,IAEJ,OACE,wBAAOS,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCAEA,wCAIJ,gCACGV,EAAMW,KAAI,SAACH,GAAD,OACT,qBAAI,UAAQ,OAAZ,UACE,oBAAIE,UAAU,eAAd,SAA8BF,EAAKC,KAEnC,oBAAIC,UAAU,eAAd,SACGF,EAAKI,WACJ,sBAAMF,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWG,IACZ,WACA,CACE,mBAAoBL,EAAKI,UACzB,mBAAoBJ,EAAKI,YAJ7B,SAQGJ,EAAKM,UAIV,oBAAIJ,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVK,KAAK,SACLC,QAAS,kBAAMV,EAAYE,IAJ7B,SAME,sBAAME,UAAU,OAAhB,SACE,mBAAGA,UACDG,IAAW,MACT,CACE,UAAU,EACV,eAAgBT,IAAkBI,EAAKC,IAClCP,cArCKM,EAAKC,c,SDzC3BX,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KEGL,ICYMmB,EAA8B,SAAC,GAGrC,IAFLC,EAEI,EAFJA,gBACAC,EACI,EADJA,eAEA,EAA0BhB,mBAAS,IAAnC,mBAAOiB,EAAP,KAAcC,EAAd,KACA,EAA4BlB,mBAASL,EAAMwB,KAA3C,mBAAOC,EAAP,KAAeC,EAAf,KAEMC,EAAqBlB,uBACzB,SAACmB,GACC,IAAMC,EAAYD,EAAME,OAAOC,MAE/BL,EAAUG,KACT,CAACH,IAGAM,EAAcvB,uBAClB,SAACmB,GACC,IAAMK,EAAWL,EAAME,OAAOC,MAE9BR,EAASU,KACR,CAACV,IAGAW,EAAczB,uBAAY,WAC9Bc,EAAS,MACR,CAACA,IAEEY,EAAgBC,mBAAQ,WAC5B,ODxCuB,SAAClC,EAAeuB,EAAeH,GACxD,OAAOpB,EAAMuB,QAAO,SAACf,GACnB,IAAM2B,EAAa3B,EAAKM,MAAMsB,oBACxBC,EAAajB,EAAMgB,oBAEnBE,EAAWf,IAAWzB,EAAMyC,SAAW/B,EAAKI,UAC5C4B,EAAcjB,IAAWzB,EAAM2C,WAAajC,EAAKI,UACjD8B,EAAiBnB,IAAWzB,EAAMwB,KAAOgB,GAAYE,EAE3D,MAAc,KAAVpB,EACKsB,EAGFA,GAAkBP,EAAWQ,SAASN,MC2BtCO,CAAY1B,EAAiBK,EAAQH,KAC3C,CAACF,EAAiBK,EAAQH,IAM7B,OAJAyB,qBAAU,WACR1B,EAAec,KACd,CAACA,IAGF,uBAAMvB,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBAAQ,UAAQ,eAAeoC,SAAUrB,EAAzC,UACE,wBAAQI,MAAO/B,EAAMwB,IAArB,iBACA,wBAAQO,MAAO/B,EAAMyC,OAArB,oBACA,wBAAQV,MAAO/B,EAAM2C,UAArB,8BAKN,oBAAG/B,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRK,KAAK,OACLL,UAAU,QACVqC,YAAY,YACZlB,MAAOT,EACP0B,SAAUhB,IAEZ,sBAAMpB,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGf,sBAAMA,UAAU,gBAAgBsC,MAAO,CAAEC,cAAe,OAAxD,SACG7B,GACC,wBACE,UAAQ,oBACRL,KAAK,SACLL,UAAU,SACV,aAAW,SACXM,QAASgB,aC/EVkB,G,MAAmB,kBAC9B,qBAAKxC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCSnB,SAASyC,EAAOC,GAEd,IARYC,EAQNC,EAZS,iEAYYF,EAAM,QAGjC,OAXYC,EAWA,IAVL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OAUnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICbMC,EAA6B,SAAC,GAGpC,IAFLtD,EAEI,EAFJA,KACAuD,EACI,EADJA,YAEA,EAAwB5D,qBAAxB,mBAAO6D,EAAP,KAAaC,EAAb,KACA,EAAwC9D,oBAAS,GAAjD,mBAAO+D,EAAP,KAAqBC,EAArB,KAEAtB,qBAAU,WACR,IAAMuB,EAAS,uCAAG,4BAAAC,EAAA,0DACZ7D,EADY,gCDOE8D,ECLkB9D,EAAK8D,ODKJnB,EAAG,iBAAiBmB,ICPzC,OAERC,EAFQ,OAIdN,EAAQM,GAJM,OAOhBJ,GAAgB,GAPA,iCDOC,IAACG,ICPF,OAAH,qDAUfF,MACC,CAAC5D,IAEJ,IAIA,SAAiCA,QAAjC,IAAiCA,IAAQ,GAAjCC,EAAR,EAAQA,GAAIK,EAAZ,EAAYA,MAAOF,EAAnB,EAAmBA,UAEnB,OACE,sBAAKF,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEbwD,EAGA,sBAAKxD,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYD,KAGZ,wBACEM,KAAK,SACLL,UAAU,SACV,UAAQ,cACR,aAAW,cACXM,QA3BQ,WAClB+C,EAAY,YA8BN,sBAAKrD,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGI,IAGH,oBAAGJ,UAAU,QAAQ,UAAQ,aAA7B,UACE,wBAAQA,UAAS,mBAAcE,EAAY,UAAY,UAAvD,SACGA,EAAY,OAAS,YAGvB,OAED,mBAAG4D,KAAK,2BAAR,SACGR,GAAQA,EAAKS,gBAjCtB,cAAC,EAAD,QChCKC,EAAgB,WAC3B,MAAgCvE,oBAAS,GAAzC,mBAAOwE,EAAP,KAAiBC,EAAjB,KACA,EAAoCzE,mBAAiB,IAArD,mBAAO0E,EAAP,KAAwBC,EAAxB,KACA,EAAwC3E,mBAAsB,MAA9D,mBAAO4E,EAAP,KAAqBC,EAArB,KACA,EAA0C7E,mBAAiB,IAA3D,mBAAO8B,EAAP,KAAsBgD,EAAtB,KACA,EAAgC9E,oBAAS,GAAzC,mBAAO+E,EAAP,KAAiBC,EAAjB,KAEAtC,qBAAU,WACR,IAAMuC,EAAU,uCAAG,4BAAAf,EAAA,+EFKOlB,EAAY,UELnB,OAETkC,EAFS,OAIfP,EAASO,GACTJ,EAAiBI,GALF,gDAOfF,GAAY,GAPG,yBASfP,GAAY,GATG,4EAAH,qDAahBQ,MACC,IAEH,IAIME,GAAYJ,GAChB,cAAC,EAAD,CACElF,MAAOiC,EACPhC,aAPe,SAACO,GAClBwE,EAAgBxE,IAOdN,aAAc6E,IAIlB,OACE,qCACE,qBAAKrE,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEQ,gBAAiB2D,EACjB1D,eAAgB8D,MAIpB,sBAAKvE,UAAU,QAAf,UACGwE,GAAY,2EAEZP,EACGW,EACA,cAAC,EAAD,cAMXP,GACC,cAAC,EAAD,CACEvE,KAAMuE,EACNhB,YAAaiB,QCxEvBO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c2050bf3.chunk.js","sourcesContent":["export enum Todos {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import classNames from 'classnames';\nimport React, { useCallback, useState } from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  onSelectTodo: (todo: Todo) => void;\n  onClosedTodo: Todo | null;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelectTodo,\n  onClosedTodo,\n}) => {\n  const [currentTodoId, setCurrentTodoId] = useState(0);\n\n  const handleClick = useCallback((todo: Todo) => {\n    setCurrentTodoId(todo.id);\n    onSelectTodo(todo);\n  }, [onSelectTodo]);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n\n          <th>Title</th>\n\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => (\n          <tr data-cy=\"todo\" key={todo.id}>\n            <td className=\"is-vcentered\">{todo.id}</td>\n\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                'has-text',\n                {\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleClick(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={\n                    classNames('far',\n                      {\n                        'fa-eye': true,\n                        'fa-eye-slash': currentTodoId === todo.id\n                          && onClosedTodo,\n                      })\n                  }\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Todos } from '../enums/Todos';\nimport { Todo } from '../types/Todo';\n\nexport const filterTodos = (todos: Todo[], filter: Todos, query: string) => {\n  return todos.filter((todo) => {\n    const fixedTitle = todo.title.toLocaleLowerCase();\n    const fixedQuery = query.toLocaleLowerCase();\n\n    const isActive = filter === Todos.Active && !todo.completed;\n    const isCompleted = filter === Todos.Completed && todo.completed;\n    const filterByStatus = filter === Todos.All || isActive || isCompleted;\n\n    if (query === '') {\n      return filterByStatus;\n    }\n\n    return filterByStatus && fixedTitle.includes(fixedQuery);\n  });\n};\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { Todo } from '../../types/Todo';\nimport { filterTodos } from '../helpers';\nimport { Todos } from '../../enums/Todos';\n\ninterface Props {\n  onUploadedTodos: Todo[];\n  onCurrentTodos: (todos: Todo[]) => void;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  onUploadedTodos,\n  onCurrentTodos,\n}) => {\n  const [query, setQuery] = useState('');\n  const [filter, setFilter] = useState(Todos.All);\n\n  const handleStatusSelect = useCallback(\n    (event: React.ChangeEvent<HTMLSelectElement>) => {\n      const newFilter = event.target.value as Todos;\n\n      setFilter(newFilter);\n    }, [setFilter],\n  );\n\n  const handleInput = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const newQuery = event.target.value;\n\n      setQuery(newQuery);\n    }, [setQuery],\n  );\n\n  const handleReset = useCallback(() => {\n    setQuery('');\n  }, [setQuery]);\n\n  const filteredTodos = useMemo(() => {\n    return filterTodos(onUploadedTodos, filter, query);\n  }, [onUploadedTodos, filter, query]);\n\n  useEffect(() => {\n    onCurrentTodos(filteredTodos);\n  }, [filteredTodos]);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={handleStatusSelect}>\n            <option value={Todos.All}>All</option>\n            <option value={Todos.Active}>Active</option>\n            <option value={Todos.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"Delete\"\n              onClick={handleReset}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo | null;\n  onResetTodo: (Todo: null) => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  onResetTodo,\n}) => {\n  const [user, setUser] = useState<User>();\n  const [isUserLoaded, setIsUserLoaded] = useState(false);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      if (todo) {\n        const currentUser = await getUser(todo.userId);\n\n        setUser(currentUser);\n      }\n\n      setIsUserLoaded(true);\n    };\n\n    fetchUser();\n  }, [todo]);\n\n  const handleReset = () => {\n    onResetTodo(null);\n  };\n\n  const { id, title, completed } = todo ?? {};\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isUserLoaded ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"Close modal\"\n              onClick={handleReset}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={`has-text-${completed ? 'success' : 'danger'}`}>\n                {completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">\n                {user && user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [todosFromServer, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const uploadedTodos = await getTodos();\n\n        setTodos(uploadedTodos);\n        setFilteredTodos(uploadedTodos);\n      } catch {\n        setHasError(true);\n      } finally {\n        setIsLoaded(true);\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  const handleTodo = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const todoList = !hasError && (\n    <TodoList\n      todos={filteredTodos}\n      onSelectTodo={handleTodo}\n      onClosedTodo={selectedTodo}\n    />\n  );\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onUploadedTodos={todosFromServer}\n                onCurrentTodos={setFilteredTodos}\n              />\n            </div>\n\n            <div className=\"block\">\n              {hasError && <span>Something went wrong. Please try later.</span>}\n\n              {isLoaded\n                ? todoList\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onResetTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}